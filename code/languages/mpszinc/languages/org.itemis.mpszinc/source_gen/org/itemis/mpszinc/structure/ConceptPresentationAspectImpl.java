package org.itemis.mpszinc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ZAnnotations;
  private ConceptPresentation props_ZChunk;
  private ConceptPresentation props_ZIdent;
  private ConceptPresentation props_ZTiExpr;
  private ConceptPresentation props_ZTiExprAndId;
  private ConceptPresentation props_ZVarDecl;
  private ConceptPresentation props_Zexpr;
  private ConceptPresentation props_Zitem;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ZAnnotations:
        if (props_ZAnnotations == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ZAnnotations");
          props_ZAnnotations = cpb.create();
        }
        return props_ZAnnotations;
      case LanguageConceptSwitch.ZChunk:
        if (props_ZChunk == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ZChunk = cpb.create();
        }
        return props_ZChunk;
      case LanguageConceptSwitch.ZIdent:
        if (props_ZIdent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ZIdent");
          props_ZIdent = cpb.create();
        }
        return props_ZIdent;
      case LanguageConceptSwitch.ZTiExpr:
        if (props_ZTiExpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ZTiExpr");
          props_ZTiExpr = cpb.create();
        }
        return props_ZTiExpr;
      case LanguageConceptSwitch.ZTiExprAndId:
        if (props_ZTiExprAndId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ZTiExprAndId");
          props_ZTiExprAndId = cpb.create();
        }
        return props_ZTiExprAndId;
      case LanguageConceptSwitch.ZVarDecl:
        if (props_ZVarDecl == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ZVarDecl");
          props_ZVarDecl = cpb.create();
        }
        return props_ZVarDecl;
      case LanguageConceptSwitch.Zexpr:
        if (props_Zexpr == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Zexpr");
          props_Zexpr = cpb.create();
        }
        return props_Zexpr;
      case LanguageConceptSwitch.Zitem:
        if (props_Zitem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Zitem = cpb.create();
        }
        return props_Zitem;
    }
    return null;
  }
}
