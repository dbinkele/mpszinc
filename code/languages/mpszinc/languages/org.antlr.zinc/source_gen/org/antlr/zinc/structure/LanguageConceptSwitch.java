package org.antlr.zinc.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Annotation = 0;
  public static final int ArithComplexExpr_1 = 1;
  public static final int ArithComplexExpr_2 = 2;
  public static final int ArithExpr_1 = 3;
  public static final int ArithExpr_2 = 4;
  public static final int ArithExpr_3 = 5;
  public static final int ArithOp2_1 = 6;
  public static final int ArithOp2_2 = 7;
  public static final int ArithOp2_3 = 8;
  public static final int ArithOp2_4 = 9;
  public static final int ArithOp2_5 = 10;
  public static final int ArithOp2_6 = 11;
  public static final int ArithOp_1 = 12;
  public static final int ArithOp_2 = 13;
  public static final int ArithOp_3 = 14;
  public static final int ArithOp_4 = 15;
  public static final int ArithOp_5 = 16;
  public static final int ArithOp_6 = 17;
  public static final int ArithOp_7 = 18;
  public static final int ArithOp_8 = 19;
  public static final int Arrayaccess_1 = 20;
  public static final int Arrayaccess_2 = 21;
  public static final int BaseConcept = 22;
  public static final int BodyIf = 23;
  public static final int BodyIf_block_1_1_1 = 24;
  public static final int BodyIf_block_1_1_2 = 25;
  public static final int BoolComplexExpr_1 = 26;
  public static final int BoolComplexExpr_2 = 27;
  public static final int BoolComplexExpr_3 = 28;
  public static final int BoolComplexExpr_block_1_1_1 = 29;
  public static final int BoolComplexExpr_block_1_1_2 = 30;
  public static final int BoolComplexExpr_block_2_1_1 = 31;
  public static final int BoolComplexExpr_block_2_1_2 = 32;
  public static final int BoolExpr_1 = 33;
  public static final int BoolExpr_2 = 34;
  public static final int BoolExpr_3 = 35;
  public static final int BoolExpr_4 = 36;
  public static final int BoolExpr_block_1_1_1 = 37;
  public static final int BoolExpr_block_1_1_2 = 38;
  public static final int BoolExpr_block_2_1_1 = 39;
  public static final int BoolExpr_block_2_1_2 = 40;
  public static final int BoolOp_1 = 41;
  public static final int BoolOp_2 = 42;
  public static final int BoolOp_3 = 43;
  public static final int BoolOp_4 = 44;
  public static final int BoolOp_5 = 45;
  public static final int BoolOp_6 = 46;
  public static final int BoolOp_7 = 47;
  public static final int BoolOp_8 = 48;
  public static final int BoolOp_9 = 49;
  public static final int BoolS = 50;
  public static final int BoolVal_1 = 51;
  public static final int BoolVal_2 = 52;
  public static final int BoolVal_3 = 53;
  public static final int BoolVal_4 = 54;
  public static final int BoolVal_5 = 55;
  public static final int BoolVal_6 = 56;
  public static final int BoolVal_7 = 57;
  public static final int BoolVal_8 = 58;
  public static final int BracketExpr_1 = 59;
  public static final int BracketExpr_2 = 60;
  public static final int CaseBranch = 61;
  public static final int CaseBranch_block_1_1_1 = 62;
  public static final int CaseBranch_block_1_1_2 = 63;
  public static final int CaseExpr = 64;
  public static final int CaseExpr_block_1_1 = 65;
  public static final int CommaList_1 = 66;
  public static final int CommaList_block_1_1 = 67;
  public static final int CommaList_block_1_2 = 68;
  public static final int CommentStatement = 69;
  public static final int Constr_1 = 70;
  public static final int Constr_2 = 71;
  public static final int Constrainchoice_1 = 72;
  public static final int Constrainchoice_2 = 73;
  public static final int Constrainchoice_3 = 74;
  public static final int Constrainchoice_4 = 75;
  public static final int Constrainchoice_5 = 76;
  public static final int Constraint = 77;
  public static final int Data = 78;
  public static final int Data_block_1_1 = 79;
  public static final int Decl_1 = 80;
  public static final int Decl_2 = 81;
  public static final int Dimensions = 82;
  public static final int Dimensions_block_1_1_1 = 83;
  public static final int Dimensions_block_1_1_2 = 84;
  public static final int Dimensions_block_1_2 = 85;
  public static final int Dimensions_block_1_3 = 86;
  public static final int ElseS = 87;
  public static final int ElseifS = 88;
  public static final int EmptyStatement = 89;
  public static final int Expr_1 = 90;
  public static final int Expr_10 = 91;
  public static final int Expr_11 = 92;
  public static final int Expr_12 = 93;
  public static final int Expr_13 = 94;
  public static final int Expr_14 = 95;
  public static final int Expr_15 = 96;
  public static final int Expr_2 = 97;
  public static final int Expr_3 = 98;
  public static final int Expr_4 = 99;
  public static final int Expr_5 = 100;
  public static final int Expr_6 = 101;
  public static final int Expr_7 = 102;
  public static final int Expr_8 = 103;
  public static final int Expr_9 = 104;
  public static final int Extended = 105;
  public static final int Extended_block_1_1 = 106;
  public static final int Extended_block_1_2 = 107;
  public static final int Extendsmark = 108;
  public static final int FromR_1 = 109;
  public static final int Function = 110;
  public static final int Function_block_1_1 = 111;
  public static final int Function_block_1_2 = 112;
  public static final int Guard = 113;
  public static final int Guard_block_1_1 = 114;
  public static final int GuardedList = 115;
  public static final int GuardedSet = 116;
  public static final int IArithComplexExpr = 117;
  public static final int IArithExpr = 118;
  public static final int IArithOp = 119;
  public static final int IArithOp2 = 120;
  public static final int IArrayaccess = 121;
  public static final int IBodyIf_block_1_1 = 122;
  public static final int IBoolComplexExpr = 123;
  public static final int IBoolComplexExpr_block_1_1 = 124;
  public static final int IBoolComplexExpr_block_2_1 = 125;
  public static final int IBoolExpr = 126;
  public static final int IBoolExpr_block_1_1 = 127;
  public static final int IBoolExpr_block_2_1 = 128;
  public static final int IBoolOp = 129;
  public static final int IBoolVal = 130;
  public static final int IBracketExpr = 131;
  public static final int ICaseBranch_block_1_1 = 132;
  public static final int ICommaList = 133;
  public static final int IConstr = 134;
  public static final int IConstrainchoice = 135;
  public static final int IDecl = 136;
  public static final int IDimensions_block_1_1 = 137;
  public static final int IExpr = 138;
  public static final int IFromR = 139;
  public static final int IInfixOp = 140;
  public static final int IInfixSetOp = 141;
  public static final int IInteger = 142;
  public static final int ILetDecl = 143;
  public static final int IListExpr = 144;
  public static final int IListValue = 145;
  public static final int IModeAnnotation = 146;
  public static final int IOneDimList = 147;
  public static final int IOp = 148;
  public static final int IOpOrID = 149;
  public static final int IOperand = 150;
  public static final int IOptimize = 151;
  public static final int IOutput = 152;
  public static final int IPardecl = 153;
  public static final int IPostExt = 154;
  public static final int IPreExt = 155;
  public static final int IPredOrUnionExpr_block_1_1 = 156;
  public static final int IQualName = 157;
  public static final int IRange = 158;
  public static final int ISetExpr = 159;
  public static final int ISetVal = 160;
  public static final int ISimpleList = 161;
  public static final int ISolve = 162;
  public static final int ISolve_block_1_1 = 163;
  public static final int IStat = 164;
  public static final int IStringExpr = 165;
  public static final int IToR = 166;
  public static final int ITypename = 167;
  public static final int IVarchoice = 168;
  public static final int Idexpr = 169;
  public static final int IfExpr = 170;
  public static final int InDecl = 171;
  public static final int InDecl_block_1_1 = 172;
  public static final int Include = 173;
  public static final int InfixOp_1 = 174;
  public static final int InfixOp_2 = 175;
  public static final int InfixSetOp_1 = 176;
  public static final int InfixSetOp_2 = 177;
  public static final int InfixSetOp_3 = 178;
  public static final int Init = 179;
  public static final int IntS = 180;
  public static final int Integer_1 = 181;
  public static final int LetDecl_1 = 182;
  public static final int LetDecl_2 = 183;
  public static final int LetExpr = 184;
  public static final int LetExpr_block_1_1 = 185;
  public static final int ListExpr_1 = 186;
  public static final int ListExpr_2 = 187;
  public static final int ListExpr_3 = 188;
  public static final int ListExpr_4 = 189;
  public static final int ListExtended = 190;
  public static final int ListExtended_block_1_1 = 191;
  public static final int ListValue_1 = 192;
  public static final int ListValue_2 = 193;
  public static final int ListValue_3 = 194;
  public static final int ListValue_4 = 195;
  public static final int ListValue_5 = 196;
  public static final int Maximize = 197;
  public static final int Minimize = 198;
  public static final int MinusExpr = 199;
  public static final int ModeAnnotation_1 = 200;
  public static final int ModeAnnotation_2 = 201;
  public static final int ModeAnnotation_3 = 202;
  public static final int ModeAnnotation_4 = 203;
  public static final int Model = 204;
  public static final int MultiDimList = 205;
  public static final int MultiDimList_block_1_1 = 206;
  public static final int MultiDimList_block_1_2 = 207;
  public static final int MultiDimList_block_1_3 = 208;
  public static final int NonEmptyListElems = 209;
  public static final int NonEmptyListElems_block_1_1 = 210;
  public static final int NotExpr = 211;
  public static final int OneDimList_1 = 212;
  public static final int OneDimList_2 = 213;
  public static final int Onesection = 214;
  public static final int Onesection_block_1_1 = 215;
  public static final int Onesection_block_1_2 = 216;
  public static final int OpOrID_1 = 217;
  public static final int OpOrID_2 = 218;
  public static final int Op_1 = 219;
  public static final int Op_2 = 220;
  public static final int Operand_1 = 221;
  public static final int Operand_2 = 222;
  public static final int Operand_3 = 223;
  public static final int Operand_4 = 224;
  public static final int Operand_5 = 225;
  public static final int Operand_6 = 226;
  public static final int Operand_7 = 227;
  public static final int Operand_8 = 228;
  public static final int Optimize_1 = 229;
  public static final int Optimize_2 = 230;
  public static final int Output_1 = 231;
  public static final int Output_2 = 232;
  public static final int ParDecl = 233;
  public static final int ParRef = 234;
  public static final int Parameter = 235;
  public static final int Parameter_block_1_1 = 236;
  public static final int Pararray = 237;
  public static final int Pardecl_1 = 238;
  public static final int Pardecl_2 = 239;
  public static final int PostExt_1 = 240;
  public static final int PreExt_1 = 241;
  public static final int PredOrUnionExpr = 242;
  public static final int PredOrUnionExpr_block_1_1_1 = 243;
  public static final int PredOrUnionExpr_block_1_1_2 = 244;
  public static final int Predicate = 245;
  public static final int Predicate_block_1_1 = 246;
  public static final int Predicate_block_1_2 = 247;
  public static final int QualArithOp = 248;
  public static final int QualBoolOp = 249;
  public static final int QualName_1 = 250;
  public static final int QualName_2 = 251;
  public static final int QualName_3 = 252;
  public static final int Range_1 = 253;
  public static final int Range_2 = 254;
  public static final int RbracketExpr = 255;
  public static final int Real = 256;
  public static final int RestS = 257;
  public static final int Satisfy = 258;
  public static final int Scons = 259;
  public static final int SeqS = 260;
  public static final int SeqS_block_1_1 = 261;
  public static final int SetExpr_1 = 262;
  public static final int SetExpr_2 = 263;
  public static final int SetS = 264;
  public static final int SetVal_1 = 265;
  public static final int SetVal_2 = 266;
  public static final int SetVal_3 = 267;
  public static final int SimpleList_1 = 268;
  public static final int SimpleList_2 = 269;
  public static final int SimpleNonEmptyList = 270;
  public static final int SimpleNonEmptyList_block_1_1 = 271;
  public static final int Solve = 272;
  public static final int Solve_block_1_1_1 = 273;
  public static final int Solve_block_1_2_1 = 274;
  public static final int Solve_block_1_2_2 = 275;
  public static final int Stat_1 = 276;
  public static final int Stat_10 = 277;
  public static final int Stat_2 = 278;
  public static final int Stat_3 = 279;
  public static final int Stat_4 = 280;
  public static final int Stat_5 = 281;
  public static final int Stat_6 = 282;
  public static final int Stat_7 = 283;
  public static final int Stat_8 = 284;
  public static final int Stat_9 = 285;
  public static final int String = 286;
  public static final int StringExpr_1 = 287;
  public static final int Tcons = 288;
  public static final int Tcons_block_1_1 = 289;
  public static final int ToR_1 = 290;
  public static final int Twosections = 291;
  public static final int Typedata = 292;
  public static final int Typename_1 = 293;
  public static final int Typename_2 = 294;
  public static final int Typename_3 = 295;
  public static final int Typename_4 = 296;
  public static final int Typename_5 = 297;
  public static final int Typename_6 = 298;
  public static final int Typename_7 = 299;
  public static final int Typeset = 300;
  public static final int Var = 301;
  public static final int VarDecl = 302;
  public static final int VarDeclItem = 303;
  public static final int VarRef = 304;
  public static final int Vararray = 305;
  public static final int Varchoice_1 = 306;
  public static final int Varchoice_2 = 307;
  public static final int Varchoice_3 = 308;
  public static final int Vardecl_block_1_1_1 = 309;
  public static final int Vardecl_block_1_1_2 = 310;
  public static final int Varmark = 311;
  public static final int WhereCond = 312;
  public static final int ZAnd = 313;
  public static final int ZIff = 314;
  public static final int ZImplies = 315;
  public static final int ZIntDiv = 316;
  public static final int ZNot = 317;
  public static final int ZOr = 318;
  public static final int ZXor = 319;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xd84d0ef936eb4841L, 0xbd7c5b126eb1e2b4L);
    builder.put(0x2656959549f3825fL, Annotation);
    builder.put(0x2656959549f38256L, ArithComplexExpr_1);
    builder.put(0x2656959549f38257L, ArithComplexExpr_2);
    builder.put(0x2656959549f382afL, ArithExpr_1);
    builder.put(0x2656959549f382b0L, ArithExpr_2);
    builder.put(0x2656959549f382b1L, ArithExpr_3);
    builder.put(0x2656959549f382c9L, ArithOp2_1);
    builder.put(0x2656959549f382caL, ArithOp2_2);
    builder.put(0x2656959549f382cbL, ArithOp2_3);
    builder.put(0x2656959549f382ccL, ArithOp2_4);
    builder.put(0x2656959549f382cdL, ArithOp2_5);
    builder.put(0x2656959549f382ceL, ArithOp2_6);
    builder.put(0x2656959549f3820fL, ArithOp_1);
    builder.put(0x2656959549f38210L, ArithOp_2);
    builder.put(0x2656959549f38211L, ArithOp_3);
    builder.put(0x2656959549f38212L, ArithOp_4);
    builder.put(0x2656959549f38213L, ArithOp_5);
    builder.put(0x2656959549f38214L, ArithOp_6);
    builder.put(0x2656959549f38215L, ArithOp_7);
    builder.put(0x2656959549f38216L, ArithOp_8);
    builder.put(0x2656959549f38307L, Arrayaccess_1);
    builder.put(0x2656959549f38308L, Arrayaccess_2);
    builder.put(0x2656959549f381f6L, BaseConcept);
    builder.put(0x2656959549f382f5L, BodyIf);
    builder.put(0x2656959549f3829dL, BodyIf_block_1_1_1);
    builder.put(0x2656959549f3829eL, BodyIf_block_1_1_2);
    builder.put(0x2656959549f381f8L, BoolComplexExpr_1);
    builder.put(0x2656959549f381f9L, BoolComplexExpr_2);
    builder.put(0x2656959549f381faL, BoolComplexExpr_3);
    builder.put(0x2656959549f38326L, BoolComplexExpr_block_1_1_1);
    builder.put(0x2656959549f38327L, BoolComplexExpr_block_1_1_2);
    builder.put(0x2656959549f3822bL, BoolComplexExpr_block_2_1_1);
    builder.put(0x2656959549f3822cL, BoolComplexExpr_block_2_1_2);
    builder.put(0x2656959549f3827aL, BoolExpr_1);
    builder.put(0x2656959549f3827bL, BoolExpr_2);
    builder.put(0x2656959549f3827cL, BoolExpr_3);
    builder.put(0x2656959549f3827dL, BoolExpr_4);
    builder.put(0x2656959549f3831eL, BoolExpr_block_1_1_1);
    builder.put(0x2656959549f3831fL, BoolExpr_block_1_1_2);
    builder.put(0x2656959549f38223L, BoolExpr_block_2_1_1);
    builder.put(0x2656959549f38224L, BoolExpr_block_2_1_2);
    builder.put(0x2656959549f3830dL, BoolOp_1);
    builder.put(0x2656959549f3830eL, BoolOp_2);
    builder.put(0x2656959549f3830fL, BoolOp_3);
    builder.put(0x2656959549f38310L, BoolOp_4);
    builder.put(0x2656959549f38311L, BoolOp_5);
    builder.put(0x2656959549f38312L, BoolOp_6);
    builder.put(0x2656959549f38313L, BoolOp_7);
    builder.put(0x2656959549f38314L, BoolOp_8);
    builder.put(0x2656959549f38315L, BoolOp_9);
    builder.put(0x2656959549f3822dL, BoolS);
    builder.put(0x2656959549f38205L, BoolVal_1);
    builder.put(0x2656959549f38206L, BoolVal_2);
    builder.put(0x2656959549f38207L, BoolVal_3);
    builder.put(0x2656959549f38208L, BoolVal_4);
    builder.put(0x2656959549f38209L, BoolVal_5);
    builder.put(0x2656959549f3820aL, BoolVal_6);
    builder.put(0x2656959549f3820bL, BoolVal_7);
    builder.put(0x2656959549f3820cL, BoolVal_8);
    builder.put(0x2656959549f38321L, BracketExpr_1);
    builder.put(0x2656959549f38322L, BracketExpr_2);
    builder.put(0x2656959549f382c2L, CaseBranch);
    builder.put(0x2656959549f3830aL, CaseBranch_block_1_1_1);
    builder.put(0x2656959549f3830bL, CaseBranch_block_1_1_2);
    builder.put(0x2656959549f38277L, CaseExpr);
    builder.put(0x2656959549f382b7L, CaseExpr_block_1_1);
    builder.put(0x2656959549f382a1L, CommaList_1);
    builder.put(0x2656959549f382dbL, CommaList_block_1_1);
    builder.put(0x2656959549f382dcL, CommaList_block_1_2);
    builder.put(0x24537a949da9e744L, CommentStatement);
    builder.put(0x2656959549f38250L, Constr_1);
    builder.put(0x2656959549f38251L, Constr_2);
    builder.put(0x2656959549f3824aL, Constrainchoice_1);
    builder.put(0x2656959549f3824bL, Constrainchoice_2);
    builder.put(0x2656959549f3824cL, Constrainchoice_3);
    builder.put(0x2656959549f3824dL, Constrainchoice_4);
    builder.put(0x2656959549f3824eL, Constrainchoice_5);
    builder.put(0x2656959549f38276L, Constraint);
    builder.put(0x2656959549f3829bL, Data);
    builder.put(0x2656959549f38227L, Data_block_1_1);
    builder.put(0x2656959549f38299L, Decl_1);
    builder.put(0x2656959549f3829aL, Decl_2);
    builder.put(0x2656959549f38294L, Dimensions);
    builder.put(0x2656959549f3826dL, Dimensions_block_1_1_1);
    builder.put(0x2656959549f3826eL, Dimensions_block_1_1_2);
    builder.put(0x2656959549f382c3L, Dimensions_block_1_2);
    builder.put(0x2656959549f382c7L, Dimensions_block_1_3);
    builder.put(0x2656959549f3832eL, ElseS);
    builder.put(0x2656959549f38259L, ElseifS);
    builder.put(0x1bb0060e71f082cfL, EmptyStatement);
    builder.put(0x2656959549f382f7L, Expr_1);
    builder.put(0x2656959549f38300L, Expr_10);
    builder.put(0x2656959549f38301L, Expr_11);
    builder.put(0x2656959549f38302L, Expr_12);
    builder.put(0x2656959549f38303L, Expr_13);
    builder.put(0x2656959549f38304L, Expr_14);
    builder.put(0x2656959549f38305L, Expr_15);
    builder.put(0x2656959549f382f8L, Expr_2);
    builder.put(0x2656959549f382f9L, Expr_3);
    builder.put(0x2656959549f382faL, Expr_4);
    builder.put(0x2656959549f382fbL, Expr_5);
    builder.put(0x2656959549f382fcL, Expr_6);
    builder.put(0x2656959549f382fdL, Expr_7);
    builder.put(0x2656959549f382feL, Expr_8);
    builder.put(0x2656959549f382ffL, Expr_9);
    builder.put(0x2656959549f38247L, Extended);
    builder.put(0x2656959549f38272L, Extended_block_1_1);
    builder.put(0x2656959549f3826fL, Extended_block_1_2);
    builder.put(0x2656959549f38278L, Extendsmark);
    builder.put(0x2656959549f38238L, FromR_1);
    builder.put(0x2656959549f382c1L, Function);
    builder.put(0x2656959549f38252L, Function_block_1_1);
    builder.put(0x2656959549f38253L, Function_block_1_2);
    builder.put(0x2656959549f38241L, Guard);
    builder.put(0x2656959549f382f0L, Guard_block_1_1);
    builder.put(0x2656959549f38274L, GuardedList);
    builder.put(0x2656959549f382d7L, GuardedSet);
    builder.put(0x2656959549f38255L, IArithComplexExpr);
    builder.put(0x2656959549f382aeL, IArithExpr);
    builder.put(0x2656959549f3820eL, IArithOp);
    builder.put(0x2656959549f382c8L, IArithOp2);
    builder.put(0x2656959549f38306L, IArrayaccess);
    builder.put(0x2656959549f3829cL, IBodyIf_block_1_1);
    builder.put(0x2656959549f381f7L, IBoolComplexExpr);
    builder.put(0x2656959549f38325L, IBoolComplexExpr_block_1_1);
    builder.put(0x2656959549f3822aL, IBoolComplexExpr_block_2_1);
    builder.put(0x2656959549f38279L, IBoolExpr);
    builder.put(0x2656959549f3831dL, IBoolExpr_block_1_1);
    builder.put(0x2656959549f38222L, IBoolExpr_block_2_1);
    builder.put(0x2656959549f3830cL, IBoolOp);
    builder.put(0x2656959549f38204L, IBoolVal);
    builder.put(0x2656959549f38320L, IBracketExpr);
    builder.put(0x2656959549f38309L, ICaseBranch_block_1_1);
    builder.put(0x2656959549f382a0L, ICommaList);
    builder.put(0x2656959549f3824fL, IConstr);
    builder.put(0x2656959549f38249L, IConstrainchoice);
    builder.put(0x2656959549f38298L, IDecl);
    builder.put(0x2656959549f3826cL, IDimensions_block_1_1);
    builder.put(0x2656959549f382f6L, IExpr);
    builder.put(0x2656959549f38237L, IFromR);
    builder.put(0x2656959549f3821fL, IInfixOp);
    builder.put(0x2656959549f382deL, IInfixSetOp);
    builder.put(0x2656959549f382a5L, IInteger);
    builder.put(0x2656959549f382c4L, ILetDecl);
    builder.put(0x2656959549f382cfL, IListExpr);
    builder.put(0x2656959549f38328L, IListValue);
    builder.put(0x2656959549f382e6L, IModeAnnotation);
    builder.put(0x2656959549f382b2L, IOneDimList);
    builder.put(0x2656959549f38318L, IOp);
    builder.put(0x2656959549f381feL, IOpOrID);
    builder.put(0x2656959549f3828bL, IOperand);
    builder.put(0x2656959549f382b8L, IOptimize);
    builder.put(0x2656959549f38217L, IOutput);
    builder.put(0x2656959549f3827fL, IPardecl);
    builder.put(0x2656959549f382ebL, IPostExt);
    builder.put(0x2656959549f38323L, IPreExt);
    builder.put(0x2656959549f3822eL, IPredOrUnionExpr_block_1_1);
    builder.put(0x2656959549f3823cL, IQualName);
    builder.put(0x2656959549f38242L, IRange);
    builder.put(0x2656959549f38239L, ISetExpr);
    builder.put(0x2656959549f3825aL, ISetVal);
    builder.put(0x2656959549f382f2L, ISimpleList);
    builder.put(0x2656959549f382beL, ISolve);
    builder.put(0x2656959549f382bbL, ISolve_block_1_1);
    builder.put(0x2656959549f38261L, IStat);
    builder.put(0x2656959549f382b5L, IStringExpr);
    builder.put(0x2656959549f38234L, IToR);
    builder.put(0x2656959549f38283L, ITypename);
    builder.put(0x2656959549f382e2L, IVarchoice);
    builder.put(0x2656959549f38246L, Idexpr);
    builder.put(0x2656959549f38258L, IfExpr);
    builder.put(0x2656959549f38232L, InDecl);
    builder.put(0x2656959549f38203L, InDecl_block_1_1);
    builder.put(0x2656959549f38260L, Include);
    builder.put(0x2656959549f38220L, InfixOp_1);
    builder.put(0x2656959549f38221L, InfixOp_2);
    builder.put(0x2656959549f382dfL, InfixSetOp_1);
    builder.put(0x2656959549f382e0L, InfixSetOp_2);
    builder.put(0x2656959549f382e1L, InfixSetOp_3);
    builder.put(0x2656959549f3821eL, Init);
    builder.put(0x2656959549f38275L, IntS);
    builder.put(0x2656959549f382a6L, Integer_1);
    builder.put(0x2656959549f382c5L, LetDecl_1);
    builder.put(0x2656959549f382c6L, LetDecl_2);
    builder.put(0x2656959549f38248L, LetExpr);
    builder.put(0x2656959549f3829fL, LetExpr_block_1_1);
    builder.put(0x2656959549f382d0L, ListExpr_1);
    builder.put(0x2656959549f382d1L, ListExpr_2);
    builder.put(0x2656959549f382d2L, ListExpr_3);
    builder.put(0x2656959549f382d3L, ListExpr_4);
    builder.put(0x2656959549f3831cL, ListExtended);
    builder.put(0x2656959549f38282L, ListExtended_block_1_1);
    builder.put(0x2656959549f38329L, ListValue_1);
    builder.put(0x2656959549f3832aL, ListValue_2);
    builder.put(0x2656959549f3832bL, ListValue_3);
    builder.put(0x2656959549f3832cL, ListValue_4);
    builder.put(0x2656959549f3832dL, ListValue_5);
    builder.put(0x2656959549f3821aL, Maximize);
    builder.put(0x2656959549f3825eL, Minimize);
    builder.put(0x2656959549f3820dL, MinusExpr);
    builder.put(0x2656959549f382e7L, ModeAnnotation_1);
    builder.put(0x2656959549f382e8L, ModeAnnotation_2);
    builder.put(0x2656959549f382e9L, ModeAnnotation_3);
    builder.put(0x2656959549f382eaL, ModeAnnotation_4);
    builder.put(0x2656959549f3821dL, Model);
    builder.put(0x2656959549f38233L, MultiDimList);
    builder.put(0x2656959549f38229L, MultiDimList_block_1_1);
    builder.put(0x2656959549f382efL, MultiDimList_block_1_2);
    builder.put(0x2656959549f382eeL, MultiDimList_block_1_3);
    builder.put(0x2656959549f38202L, NonEmptyListElems);
    builder.put(0x2656959549f382d4L, NonEmptyListElems_block_1_1);
    builder.put(0x2656959549f382d8L, NotExpr);
    builder.put(0x2656959549f382b3L, OneDimList_1);
    builder.put(0x2656959549f382b4L, OneDimList_2);
    builder.put(0x2656959549f38236L, Onesection);
    builder.put(0x2656959549f381fcL, Onesection_block_1_1);
    builder.put(0x2656959549f381fbL, Onesection_block_1_2);
    builder.put(0x2656959549f381ffL, OpOrID_1);
    builder.put(0x2656959549f38200L, OpOrID_2);
    builder.put(0x2656959549f38319L, Op_1);
    builder.put(0x2656959549f3831aL, Op_2);
    builder.put(0x2656959549f3828cL, Operand_1);
    builder.put(0x2656959549f3828dL, Operand_2);
    builder.put(0x2656959549f3828eL, Operand_3);
    builder.put(0x2656959549f3828fL, Operand_4);
    builder.put(0x2656959549f38290L, Operand_5);
    builder.put(0x2656959549f38291L, Operand_6);
    builder.put(0x2656959549f38292L, Operand_7);
    builder.put(0x2656959549f38293L, Operand_8);
    builder.put(0x2656959549f382b9L, Optimize_1);
    builder.put(0x2656959549f382baL, Optimize_2);
    builder.put(0x2656959549f38218L, Output_1);
    builder.put(0x2656959549f38219L, Output_2);
    builder.put(0x79b75b2d8b506afaL, ParDecl);
    builder.put(0x28bc9b160fb413f6L, ParRef);
    builder.put(0x2656959549f382f1L, Parameter);
    builder.put(0x2656959549f38316L, Parameter_block_1_1);
    builder.put(0x2656959549f382abL, Pararray);
    builder.put(0x2656959549f38280L, Pardecl_1);
    builder.put(0x2656959549f38281L, Pardecl_2);
    builder.put(0x2656959549f382ecL, PostExt_1);
    builder.put(0x2656959549f38324L, PreExt_1);
    builder.put(0x2656959549f38240L, PredOrUnionExpr);
    builder.put(0x2656959549f3822fL, PredOrUnionExpr_block_1_1_1);
    builder.put(0x2656959549f38230L, PredOrUnionExpr_block_1_1_2);
    builder.put(0x2656959549f3821bL, Predicate);
    builder.put(0x2656959549f38296L, Predicate_block_1_1);
    builder.put(0x2656959549f38297L, Predicate_block_1_2);
    builder.put(0x2656959549f3821cL, QualArithOp);
    builder.put(0x2656959549f382adL, QualBoolOp);
    builder.put(0x2656959549f3823dL, QualName_1);
    builder.put(0x2656959549f3823eL, QualName_2);
    builder.put(0x2656959549f3823fL, QualName_3);
    builder.put(0x2656959549f38243L, Range_1);
    builder.put(0x2656959549f38244L, Range_2);
    builder.put(0x2656959549f3827eL, RbracketExpr);
    builder.put(0x2656959549f382d6L, Real);
    builder.put(0x2656959549f382a2L, RestS);
    builder.put(0x2656959549f3831bL, Satisfy);
    builder.put(0x2656959549f382d5L, Scons);
    builder.put(0x2656959549f38317L, SeqS);
    builder.put(0x2656959549f38271L, SeqS_block_1_1);
    builder.put(0x2656959549f3823aL, SetExpr_1);
    builder.put(0x2656959549f3823bL, SetExpr_2);
    builder.put(0x2656959549f381fdL, SetS);
    builder.put(0x2656959549f3825bL, SetVal_1);
    builder.put(0x2656959549f3825cL, SetVal_2);
    builder.put(0x2656959549f3825dL, SetVal_3);
    builder.put(0x2656959549f382f3L, SimpleList_1);
    builder.put(0x2656959549f382f4L, SimpleList_2);
    builder.put(0x2656959549f38225L, SimpleNonEmptyList);
    builder.put(0x2656959549f382bdL, SimpleNonEmptyList_block_1_1);
    builder.put(0x2656959549f382d9L, Solve);
    builder.put(0x2656959549f382bcL, Solve_block_1_1_1);
    builder.put(0x2656959549f382bfL, Solve_block_1_2_1);
    builder.put(0x2656959549f382c0L, Solve_block_1_2_2);
    builder.put(0x2656959549f38262L, Stat_1);
    builder.put(0x2656959549f3826bL, Stat_10);
    builder.put(0x2656959549f38263L, Stat_2);
    builder.put(0x2656959549f38264L, Stat_3);
    builder.put(0x2656959549f38265L, Stat_4);
    builder.put(0x2656959549f38266L, Stat_5);
    builder.put(0x2656959549f38267L, Stat_6);
    builder.put(0x2656959549f38268L, Stat_7);
    builder.put(0x2656959549f38269L, Stat_8);
    builder.put(0x2656959549f3826aL, Stat_9);
    builder.put(0x2656959549f382daL, String);
    builder.put(0x2656959549f382b6L, StringExpr_1);
    builder.put(0x2656959549f38231L, Tcons);
    builder.put(0x2656959549f38295L, Tcons_block_1_1);
    builder.put(0x2656959549f38235L, ToR_1);
    builder.put(0x2656959549f382a4L, Twosections);
    builder.put(0x2656959549f38254L, Typedata);
    builder.put(0x2656959549f38284L, Typename_1);
    builder.put(0x2656959549f38285L, Typename_2);
    builder.put(0x2656959549f38286L, Typename_3);
    builder.put(0x2656959549f38287L, Typename_4);
    builder.put(0x2656959549f38288L, Typename_5);
    builder.put(0x2656959549f38289L, Typename_6);
    builder.put(0x2656959549f3828aL, Typename_7);
    builder.put(0x2656959549f382edL, Typeset);
    builder.put(0x2656959549f38226L, Var);
    builder.put(0x79b75b2d8b396e82L, VarDecl);
    builder.put(0x2656959549f38245L, VarDeclItem);
    builder.put(0x28bc9b160f99322aL, VarRef);
    builder.put(0x2656959549f382acL, Vararray);
    builder.put(0x2656959549f382e3L, Varchoice_1);
    builder.put(0x2656959549f382e4L, Varchoice_2);
    builder.put(0x2656959549f382e5L, Varchoice_3);
    builder.put(0x2656959549f382a9L, Vardecl_block_1_1_1);
    builder.put(0x2656959549f382aaL, Vardecl_block_1_1_2);
    builder.put(0x2656959549f38270L, Varmark);
    builder.put(0x2656959549f3832fL, WhereCond);
    builder.put(0x28bc9b160f3ae95cL, ZAnd);
    builder.put(0x28bc9b160f8b9a7aL, ZIff);
    builder.put(0x28bc9b160f8c5bc4L, ZImplies);
    builder.put(0x1cd0c633f5588801L, ZIntDiv);
    builder.put(0x28bc9b160f2ca300L, ZNot);
    builder.put(0x28bc9b160f5d8a82L, ZOr);
    builder.put(0x28bc9b160f70aad8L, ZXor);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
