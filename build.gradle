import de.itemis.mps.gradle.*

import java.time.LocalDate
import java.time.format.DateTimeFormatter
import java.time.format.FormatStyle


//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.2.175.cc60dc8'
    }
}

plugins {
    id 'base'
    id 'maven-publish'
    id 'co.riiid.gradle' version '0.4.2'
}

// Detect jdk location, required to start ant with tools.jar on classpath otherwise javac and tests will fail
def jdk_home

if (ext.has('java11_home')) {
    jdk_home = ext.get('java11_home')
} else if (System.getenv('JB_JAVA11_HOME') != null) {
    jdk_home = System.getenv('JB_JAVA11_HOME')
} else {
    def expected = JavaVersion.VERSION_11
    if (JavaVersion.current() != expected) {
        throw new GradleException("This build script requires Java 11 but you are currently using ${JavaVersion.current()}.\nWhat you can do:\n"
                + "  * Use project property java11_home to point to the Java 11 JDK.\n"
                + "  * Use environment variable JB_JAVA11_HOME to point to the Java 11 JDK\n"
                + "  * Run Gradle using Java 11")
    }
    jdk_home = System.getProperty('java.home')
}

// Check JDK location
if (!new File(jdk_home, "lib").exists()) {
    throw new GradleException("Unable to locate JDK home folder. Detected folder is: $jdk_home")
}

logger.info 'Using JDK at {}', jdk_home

ext.jdk_home = jdk_home

// detect if we are in a CI build
if (project.hasProperty("forceCI")) {
    ext.ciBuild = true
} else {
    //on teamcity we are in a CI build
    ext.ciBuild = project.hasProperty("teamcity")
}

// Project version
def major = '2020'
def minor = '3'

// if building a against a special branch from mbeddr/iets3 opensource is required, add the name here
// the name is enough no trailing "." is required, also the plain name from git can
// be used here. No need to convert "/" the script will take care of that.
def mbeddrBranch = ''
def osBranch = ''

// Project version
if (project.hasProperty('iets3CoreVersion')) {
    version = project.iets3CoreVersion
} else {
    if (ciBuild) {
        String gitBranch = GitBasedVersioning.gitBranch

        def buildNumber = System.env.BUILD_NUMBER.toInteger()
        if (gitBranch.startsWith("maintenance") || gitBranch.startsWith("mps")) {
            version = "$major.$minor.$buildNumber.${GitBasedVersioning.gitShortCommitHash}"
        } else {
            version = GitBasedVersioning.getVersionWithCount(major, minor, buildNumber)
        }
        println "##teamcity[buildNumber '${version}']"
    } else {
        version = "$major.$minor-SNAPSHOT"
        println "Local build detected, version will be $version"
    }
}

def forceLocal = project.hasProperty("forceLocalDependencies")

// Dependency versions
ext.mpsVersion = '2020.3.1'

if (project.hasProperty('iets3OpenSourceVersion')) {
    ext.iets3OpenSourceVersion = project.iets3OpenSourceVersion
    logger.log(LogLevel.WARN, "IETS 3 open source versions externally overwritten to $ext.iets3OpenSourceVersion")
} else {
    if (forceLocal) {
        ext.iets3OpenSourceVersion = "$major.$minor-SNAPSHOT"
        logger.log(LogLevel.WARN, "Forced local iets3.opensource of version $ext.iets3OpenSourceVersion")
    } else {
        if (osBranch != null && !osBranch.trim().isEmpty()) {
            ext.iets3OpenSourceVersion = "${osBranch.trim().replace("/", "-")}.$major.$minor.+"
        } else {
            ext.iets3OpenSourceVersion = "$major.$minor.+"
        }
    }
}

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/iets3'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/iets3_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]


ext.artifactsDir = file("$buildDir/artifacts")
ext.incrementalBuild = !project.hasProperty("disableIncrementalBuild")

wrapper {
    gradleVersion '5.5.1'
    distributionType Wrapper.DistributionType.ALL
}

configurations {
    mps
    languageLibs
    languageTestLibs
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    languageLibs "org.iets3:opensource:$iets3OpenSourceVersion"
    languageTestLibs("org.iets3.opensource:tests:$iets3OpenSourceVersion") {
        // don't need MPS transitive dependency
        exclude group: 'com.jetbrains', module: 'mps'
    }
    junitAnt 'org.apache.ant:ant-junit:1.10.6'


}

configurations.languageLibs {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        failOnVersionConflict()
        // e.g. multiple different versions of the same dependency (group and name are equal)
        if (mbeddrBranch != null && !mbeddrBranch.trim().isEmpty()) {
            force "com.mbeddr:platform:${mbeddrBranch.replace("/", "-")}.1.1+"
        }
    }
}

repositories {
    mavenLocal()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    mavenCentral()
    jcenter()
}

task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}


task resolveAllLanguageLibs(type: Copy) {
    from {
        def configs = [configurations.languageTestLibs, configurations.languageLibs]
        configs.collectMany { it.resolve() }.collect { zipTree(it) }
    }
    into "$buildDir/dependencies"
}

// Default arguments for ant scripts
def defaultScriptArgs = [
        'mps.home'                          : resolveMps.destinationDir,
        'iets3.github.core.home'            : projectDir,
        'build.dir'                         : buildDir,
        'mps.generator.skipUnmodifiedModels': incrementalBuild,
        'version'                           : version
]
def defaultScriptClasspath = project.configurations.junitAnt.fileCollection { true } +
        project.files("$ext.jdk_home/lib/tools.jar")

// enables https://github.com/mbeddr/mps-gradle-plugin#providing-global-defaults
ext["itemis.mps.gradle.ant.defaultScriptArgs"] = defaultScriptArgs.collect { "-D$it.key=$it.value".toString() }
ext["itemis.mps.gradle.ant.defaultScriptClasspath"] = defaultScriptClasspath
ext["itemis.mps.gradle.ant.defaultJavaExecutable"] = new File(jdk_home, 'bin/java')

task buildAllScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveAllLanguageLibs]) {
    script "$buildDir/scripts/build-allScripts.xml"
}

task buildLanguages(type: BuildLanguages, dependsOn: buildAllScripts) {
    script "$buildDir/scripts/build-languages.xml"
}

task buildAndRunTests(type: TestLanguages, dependsOn: buildLanguages) { task ->
    script "$buildDir/scripts/build-tests.xml"
    doFirst {
        // patch heap size setting for tests execution
        // see https://youtrack.jetbrains.com/issue/MPS-27715
        def antTestScriptFile = rootProject.file(task.script)
        antTestScriptFile.text = antTestScriptFile.text.replace("-Xmx1024m", "-Xmx2048m")
    }
    doLast {
        ant.taskdef(name: 'junitreport',
                classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                classpath: configurations.junitAnt.asPath)
        ant.junitreport {
            fileset(dir: "$buildDir", includes: '**/TEST*.xml')
            report(format: 'frames', todir: "$buildDir/junitreport")
        }
        ant.echo("JUnit report placed into $buildDir/junitreport/index.html")
    }
}

check.dependsOn buildAndRunTests

task packageAllScripts(type: Zip, dependsOn: buildAllScripts) {
    archiveBaseName = 'org.iets3.core.allScripts'
    from artifactsDir
    include 'org.iets3.allScripts.build/**'
}

task packageLanguages(type: Zip, dependsOn: buildLanguages) {
    archiveBaseName = 'org.iets3.core'
    from artifactsDir
    include 'org.iets3.core/**'
}
//
task buildDistroWithDependencies(type: RunAntScript, dependsOn: buildLanguages) {
    script "$buildDir/scripts/build-distro.xml"
    targets 'clean', 'assemble'
}

task packageDistroWithDependencies(type: Zip, dependsOn: buildDistroWithDependencies) {
    archiveBaseName = 'org.iets3.core-with-dependencies'
    from artifactsDir
    include 'org.iets3.distro/**'
}

//assemble.dependsOn packageAllScripts, packageLanguages

def pomWithdep(pom, config, configMPS) {
    pom.withXml {
        def dependenciesNode = asNode().appendNode('dependencies')
        config.resolvedConfiguration.firstLevelModuleDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.moduleGroup)
            dependencyNode.appendNode('artifactId', it.moduleName)
            dependencyNode.appendNode('version', it.moduleVersion)
            dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
        }
        configMPS.resolvedConfiguration.firstLevelModuleDependencies.each {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.moduleGroup)
            dependencyNode.appendNode('artifactId', it.moduleName)
            dependencyNode.appendNode('version', it.moduleVersion)
            dependencyNode.appendNode('type', it.moduleArtifacts[0].type)
            dependencyNode.appendNode('scope', 'provided')
        }
    }
}

publishing {
    repositories {
        maven {
            url project.publishingRepository
            if (project.hasProperty('nexusUsername')) {
                credentials {
                    username project.nexusUsername
                    password project.nexusPassword
                }
            }
        }
    }
    publications {
        allScripts(MavenPublication) {
            groupId 'org.iets3.core'
            artifactId 'allScripts'
            artifact packageAllScripts
            pomWithdep pom, configurations.languageLibs, configurations.mps
        }
        core(MavenPublication) {
            groupId 'org.iets3'
            artifactId 'core'
            artifact packageLanguages
            pomWithdep pom, configurations.languageLibs, configurations.mps
        }
    }
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveAllLanguageLibs
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('code/languages/org.iets3.core/.mps/libraries.xml')
}

task setup {
    dependsOn generateLibrariesXml
    dependsOn resolveAllLanguageLibs
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

defaultTasks 'buildLanguages'

def langLibDeps = project.configurations.languageLibs.resolvedConfiguration.lenientConfiguration.allModuleDependencies
def releaseNotes = """Automated Nightly build from ${
    LocalDate.now().format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL))
}.

Includes dependencies:
${langLibDeps.collect { "- `${it.moduleGroup}:${it.moduleName}` : `${it.moduleVersion}`" }.join("\n")}
"""

github {
    owner = 'IETS3'
    repo = 'iets3.core'
    token = rootProject.findProperty('github.token') ?: 'empty'
    tagName = 'nightly-' + version
    targetCommitish = GitBasedVersioning.getGitCommitHash()
    name = 'Nightly Build ' + version
    body = releaseNotes
    prerelease = true
    assets = packageDistroWithDependencies.outputs.files.collect { it.path }
}

githubRelease.dependsOn packageDistroWithDependencies
